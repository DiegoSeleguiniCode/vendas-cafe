# -*- coding: utf-8 -*-
"""Vendas_Cafe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aIi2ZgvT_kNWJwo561mFEolc5ZDfnQDS

##Arrumando dados
"""

import pandas as pd

#Lê o arquivo CSV 'index.csv' e armazena no DataFrame `df`.
df = pd.read_csv('index.csv')

#Exibe as primeiras linhas do DataFrame para verificar a estrutura dos dados.
df.head()

#Exibe os tipos de dados de cada coluna.
df.dtypes

#Renomeia as colunas do DataFrame para facilitar a compreensão e o uso.
df = df.rename(columns={'date': 'Data', 'datetime':'Hora', 'cash_type': 'Tipo_moeda', 'card':'Cartao', 'money':'Dinheiro', 'coffee_name':'Nome_Cafe'})

"""##Arrumando Variáveis"""

# Converte a coluna 'Data' para o formato de data.
df['Data'] = pd.to_datetime(df['Data'], format='%Y-%m-%d')

# Verifica os tipos de dados novamente após a conversão.
df.dtypes

# Converte a coluna 'Hora' para um formato datetime.
df['Hora'] = pd.to_datetime(df['Hora'])

# Extrai apenas a parte da hora (sem data) e armazena na coluna 'Hora'.
df['Hora'] = df['Hora'].dt.time

# Exibe as primeiras linhas do DataFrame para verificar as mudanças.
df.head()

# Exibe novamente os tipos de dados após todas as conversões.
df.dtypes

# Mostra as dimensões do DataFrame (número de linhas e colunas).
df.shape

# Exibe os valores únicos na coluna 'Nome_Cafe' para ver os tipos de café disponíveis.
df.Nome_Cafe.unique()

"""##Separando os Cafés"""

# Conta as vendas de cada tipo de café e cria um DataFrame com os resultados.
cafes = df.Nome_Cafe.value_counts().reset_index()

# Renomeia as colunas para 'Nome_Cafe' e 'Vendas_Totais' para facilitar a leitura.
cafes.columns = ['Nome_Cafe', 'Vendas_Totais']

# Exibe o DataFrame `cafes` com o nome dos cafés e o total de vendas.
cafes

"""##Tipo de Moedas"""

# Exibe os tipos únicos de moeda (como cartão e dinheiro) usados nas vendas.
df.Tipo_moeda.unique()

# Conta a frequência de cada tipo de moeda e cria um DataFrame com os resultados.
moedas = df.Tipo_moeda.value_counts().reset_index()

# Exibe o DataFrame `moedas` com cada tipo de moeda e a contagem de vendas associadas.
moedas

"""##Vendas por dia"""

# Conta o número de vendas por dia e cria um DataFrame com os resultados.
vendas = df.Data.value_counts().reset_index()

# Renomeia as colunas para 'Data' e 'Vendas'.
vendas.columns = ['Data', 'Vendas']

# Exibe o DataFrame `vendas` com a data e o número total de vendas.
vendas

# Encontra o valor máximo de vendas em um único dia.
maior_venda = vendas.Vendas.max()

# Identifica a data com o maior número de vendas.
data_maior_venda = vendas.loc[vendas['Vendas'].idxmax(), 'Data']

# Exibe a data com mais vendas e o total de vendas.
print(f"A data com mais vendas foi: {data_maior_venda.date()} \nO número de vendas foi: {maior_venda}")

"""##Produtos vendidos na data de maior venda"""

# Filtra o DataFrame para a data com mais vendas e conta as vendas de cada café nesse dia.
produto_maior_venda = df.loc[df['Data'] == data_maior_venda, 'Nome_Cafe'].value_counts().reset_index()

# Exibe o DataFrame `produto_maior_venda` com o nome dos cafés e o número de vendas para a data de maior venda.
produto_maior_venda

"""##Média de vendas por itens"""

# Conta a média de vendas por café em cada dia.
media_cafe_dia = df.groupby(['Data','Nome_Cafe'])['Dinheiro'].count().reset_index()

# Renomeia as colunas para facilitar a leitura.
media_cafe_dia.columns = ['Data', 'Nome_Cafe', 'Vendas']

# Exibe as vendas de café para o dia especificado.
media_cafe_dia.loc[media_cafe_dia['Data'] == '2024-03-01'] #Altere a data para ver as vendas no dia que você quer

"""##Gráfico 1"""

import matplotlib.pyplot as plt

# Cria um gráfico de barras das vendas totais por tipo de café com cor personalizada.
bars = plt.bar(cafes['Nome_Cafe'], cafes['Vendas_Totais'], color='#774439')
plt.title('Vendas por Café')
plt.xlabel('Café', fontsize=10)
plt.ylabel('Vendas')
for bar in bars:
    yval = bar.get_height()  # Obtém a altura da barra (valor de vendas)
    plt.text(
        bar.get_x() + bar.get_width() / 2,  # Posição x centralizada
        yval,  # Posição y logo acima da barra
        f'{yval}',  # Texto do rótulo
        ha='center',  # Alinhamento horizontal centralizado
        va='bottom'   # Alinhamento vertical na parte inferior do texto
    )
plt.xticks(rotation=45, ha='right')  # Rotaciona os rótulos do eixo x para evitar sobreposição.
plt.show()

"""##Gráfico 2"""

# Cria um gráfico de barras para as vendas de cada café na data com mais vendas.
bars = plt.bar(produto_maior_venda['Nome_Cafe'], produto_maior_venda['count'], color='#774439')
plt.title('Vendas de Café no dia 11/10/2024')
plt.xlabel('Café', fontsize=10)
plt.ylabel('Vendas')
for bar in bars:
    yval = bar.get_height()  # Obtém a altura da barra (valor de vendas)
    plt.text(
        bar.get_x() + bar.get_width() / 2,  # Posição x centralizada
        yval,  # Posição y logo acima da barra
        f'{yval}',  # Texto do rótulo
        ha='center',  # Alinhamento horizontal centralizado
        va='bottom'   # Alinhamento vertical na parte inferior do texto
    )
plt.xticks(rotation=45, ha='right')  # Rotaciona os rótulos do eixo x para evitar sobreposição.
plt.show()